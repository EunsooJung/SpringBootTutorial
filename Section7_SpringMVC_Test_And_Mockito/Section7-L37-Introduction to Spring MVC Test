Section 7
 Lecture 37: Introduction to Spring MVC Test

1.Problem
 1.1 Historically, Controllers have been difficult to test due to a high degree of coupling with the web context.
 1.2 Spring MVC does a great job of decoupling from the web context, but at the cost of the framework obscuring
     the web context.
 1.3 Before Spring MVC Test, there was no standard way of unit testing a web request.

2. Spring MVC Test
 2.1 Spring MVC Test works by using a mock web context, allowing you to test a web request and its interactions with
     the Spring MVC Dispatcher Servlet.
 2.2 This enables testing of Spring MVC controllers
  - Includes: handler mappings, url parameters, parameter bindings, request type mappings.

3. Why Use Spring MVC Test ?
 3.1 Allows controller tests to be 'unity'
  - Allows unit testing of framework configuration.
  - No web container, such as Tomcat, needed.
  - No Spring context required
  - Unit tests remain very fast.

4. JUnit
 4.1 JUnit is a highly popular unit testing for Java.
 4.2 JUnit is often used in conjunction with Spring MVC Test.
 4.3 JUnit is the unit test framework, Spring MVC Test is a framework for testing Spring Controllers.

5. Mockito
 5.1 The JUit framework does not have any native mocking facilities.
 5.2 Mockito is a leading mocking framework for Java.
 5.3 Mockito is commonly used to test injected dependent objects, such as services, with Spring MVC test.

6. JUnit / Mockito and Spring MVC Test
 6.1 JUnit and Mcokito are likely the most common combination you will see in enterprise use.
 6.2 TestNG is also a popular unit testing framework.
 6.3 Easy Mock and jMock are also popular alternatives for Mockito
 6.4 2013 I presented at Spring One about using Spock with the Spring MVC Test.
